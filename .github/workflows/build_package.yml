name: Build and Release AIpexium IDE
on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      version:
        description: 'Version number (e.g., 0.1.2)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release/preview'
        required: false
        type: boolean
        default: true

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15.1'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install
        
      - name: Compile Extensions
        run: npm run gulp -- compile-extensions
        
      - name: Build Windows x64 min
        run: npm run gulp -- vscode-win32-x64-min
        
      - name: Build Inno Updater
        run: npm run gulp -- vscode-win32-x64-inno-updater
        
      - name: Build User Setup
        run: npm run gulp -- vscode-win32-x64-user-setup
        
      - name: Build System Setup
        run: npm run gulp -- vscode-win32-x64-system-setup
        
      - name: Rename and collect setup files
        shell: pwsh
        run: |
          # Create output directory
          New-Item -ItemType Directory -Force -Path ./release-output
          
          # Copy and rename User Setup
          $userSetupPath = ".build/win32-x64/user-setup/SIIDSetup.exe"
          if (Test-Path $userSetupPath) {
            Copy-Item $userSetupPath -Destination "./release-output/SIIDUserSetup.exe"
            Write-Host "✓ User Setup copied and renamed"
          } else {
            Write-Error "User Setup not found at $userSetupPath"
            exit 1
          }
          
          # Copy and rename System Setup
          $systemSetupPath = ".build/win32-x64/system-setup/SIIDSetup.exe"
          if (Test-Path $systemSetupPath) {
            Copy-Item $systemSetupPath -Destination "./release-output/SIIDSystemSetup.exe"
            Write-Host "✓ System Setup copied and renamed"
          } else {
            Write-Error "System Setup not found at $systemSetupPath"
            exit 1
          }
          
      - name: Generate checksums
        shell: pwsh
        run: |
          cd release-output
          $userHash = (Get-FileHash -Algorithm SHA256 SIIDUserSetup.exe).Hash
          $systemHash = (Get-FileHash -Algorithm SHA256 SIIDSystemSetup.exe).Hash
          
          $userHash | Out-File -FilePath SIIDUserSetup.exe.sha256 -NoNewline
          $systemHash | Out-File -FilePath SIIDSystemSetup.exe.sha256 -NoNewline
          
          Write-Host "✓ Checksums generated"
          Write-Host "User Setup SHA256: $userHash"
          Write-Host "System Setup SHA256: $systemHash"
          
      - name: Get build timestamp
        id: timestamp
        shell: bash
        run: |
          echo "build_date=$(date +'%Y.%m.%d-%H%M%S')" >> $GITHUB_OUTPUT
          
      - name: Get last release tag
        id: last_release
        shell: bash
        run: |
          # Get the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "Last release tag: $LAST_TAG"
          
      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          LAST_TAG="${{ steps.last_release.outputs.last_tag }}"
          
          if [ -z "$LAST_TAG" ]; then
            echo "No previous release found. Generating changelog from all commits."
            COMMITS=$(git log --pretty=format:"- %s by @%an in %h" --no-merges)
          else
            echo "Generating changelog from $LAST_TAG to HEAD"
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s by @%an in %h" --no-merges)
          fi
          
          # Check if there are any commits
          if [ -z "$COMMITS" ]; then
            COMMITS="- No changes since last release"
          fi
          
          # Save to file to handle multiline output properly
          echo "$COMMITS" > changelog.txt
          
          # Also create a more detailed changelog
          if [ -z "$LAST_TAG" ]; then
            FULL_LOG=$(git log --pretty=format:"**%s** (%h)%n  - Author: %an <%ae>%n  - Date: %ad%n" --date=short --no-merges | head -n 50)
          else
            FULL_LOG=$(git log $LAST_TAG..HEAD --pretty=format:"**%s** (%h)%n  - Author: %an <%ae>%n  - Date: %ad%n" --date=short --no-merges)
          fi
          
          echo "$FULL_LOG" > full_changelog.txt
          
          echo "changelog_file=changelog.txt" >> $GITHUB_OUTPUT
          echo "full_changelog_file=full_changelog.txt" >> $GITHUB_OUTPUT
          
      - name: Read changelog
        id: read_changelog
        shell: bash
        run: |
          CHANGELOG=$(cat changelog.txt)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          FULL_CHANGELOG=$(cat full_changelog.txt)
          echo "full_changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$FULL_CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Get contributors
        id: contributors
        shell: bash
        run: |
          LAST_TAG="${{ steps.last_release.outputs.last_tag }}"
          
          if [ -z "$LAST_TAG" ]; then
            CONTRIBUTORS=$(git log --pretty=format:"%an" --no-merges | sort -u | sed 's/^/@/' | paste -sd "," - | sed 's/,/, /g')
          else
            CONTRIBUTORS=$(git log $LAST_TAG..HEAD --pretty=format:"%an" --no-merges | sort -u | sed 's/^/@/' | paste -sd "," - | sed 's/,/, /g')
          fi
          
          if [ -z "$CONTRIBUTORS" ]; then
            CONTRIBUTORS="@${{ github.actor }}"
          fi
          
          echo "contributors=$CONTRIBUTORS" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Alpexium IDE Release 2025.${{ github.event.inputs.version }}-${{ steps.timestamp.outputs.build_date }}"
          tag_name: "release-2025.${{ github.event.inputs.version }}"
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          generate_release_notes: false
          body: |
            ## Alpexium IDE Installers
            
            **Build Date:** ${{ steps.timestamp.outputs.build_date }}
            
            ### Downloads:
            - **SIIDUserSetup.exe** - User installation (installs for current user only)
            - **SIIDSystemSetup.exe** - System installation (installs for all users, requires admin)
            
            ### Checksums:
            Use the .sha256 files to verify your download integrity.
            
            ### What's Changed
            ${{ steps.read_changelog.outputs.changelog }}
            
            **Full Changelog:** ${{ steps.last_release.outputs.last_tag != '' && format('{0}...release-2025.{1}', steps.last_release.outputs.last_tag, github.event.inputs.version) || format('release-2025.{0}', github.event.inputs.version) }}
            
            ### Contributors
            ${{ steps.contributors.outputs.contributors }}
          files: |
            release-output/SIIDUserSetup.exe
            release-output/SIIDSystemSetup.exe
            release-output/SIIDUserSetup.exe.sha256
            release-output/SIIDSystemSetup.exe.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: alpexium-ide-installers-2025.${{ github.event.inputs.version }}
          path: |
            release-output/SIIDUserSetup.exe
            release-output/SIIDSystemSetup.exe
            release-output/*.sha256
