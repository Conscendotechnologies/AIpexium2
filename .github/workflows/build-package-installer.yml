name: Build, Package and Installer
on:
  workflow_dispatch:
  push:
    branches:
      - packaging-aman
      - main
  pull_request:
    branches:
      - main
permissions: {}
jobs:
  build-package:
    name: Build, Package and Installer VS Code
    runs-on: windows-latest
    timeout-minutes: 360   # (max allowed = 360 minutes = 6 hours)
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      
      - name: Compute node modules cache key
        id: nodeModulesCacheKey
        run: echo "value=$(node build/azure-pipelines/common/computeNodeModulesCacheKey.js)" >> $env:GITHUB_OUTPUT
      
      - name: Cache node modules
        id: cacheNodeModules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ steps.nodeModulesCacheKey.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Get npm cache directory path
        id: npmCacheDirPath
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: echo "dir=$(npm config get cache)" >> $env:GITHUB_OUTPUT
      
      - name: Cache npm directory
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.npmCacheDirPath.outputs.dir }}
          key: ${{ runner.os }}-npmCacheDir-${{ steps.nodeModulesCacheKey.outputs.value }}
          restore-keys: ${{ runner.os }}-npmCacheDir-
      
      - name: Install dependencies
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: npm install
      
      - name: Compile build without mangling
        run: npm run gulp compile-build-without-mangling
      
      - name: Bundle VS Code
        run: npm run gulp bundle-vscode
      
      - name: Build VS Code for Windows x64 (Minimum)
        run: npm run gulp -- vscode-win32-x64-min

      - name: Build VS Code for Windows x64 (Inno Updater)
        run: npm run gulp -- vscode-win32-x64-inno-updater
      
      - name: Package VS Code for Windows x64 (User Setup)
        run: npm run gulp -- vscode-win32-x64-user-setup
      
      - name: Find and prepare setup executable
        id: setup-exe
        run: |
          echo "Searching for setup executable..."
          
          if (Test-Path ".\.build\win32-x64\user-setup") {
            echo "Found user-setup directory"
            $setupFile = Get-ChildItem -Path ".\.build\win32-x64\user-setup" -Filter "*.exe" | Select-Object -First 1
            
            if ($setupFile) {
              echo "Found setup file: $($setupFile.Name)"
              echo "filename=$($setupFile.Name)" >> $env:GITHUB_OUTPUT
              echo "filepath=$($setupFile.FullName)" >> $env:GITHUB_OUTPUT
              echo "size=$([math]::Round($setupFile.Length/1MB, 2))" >> $env:GITHUB_OUTPUT
              
              # Copy to workspace root for easier access
              Copy-Item $setupFile.FullName ".\$($setupFile.Name)"
              echo "Setup file copied to workspace root"
            } else {
              echo "Error: No .exe file found in user-setup directory!"
              exit 1
            }
          } else {
            echo "Error: user-setup directory not found!"
            exit 1
          }
      
      - name: Upload setup executable
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vscode-setup-${{ github.sha }}
          path: ${{ steps.setup-exe.outputs.filename }}
          retention-days: 30
          if-no-files-found: error
      
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: vscode-setup-${{ github.run_number }}-${{ github.sha }}
          name: VS Code Setup ${{ github.run_number }}
          body: |
            ## VS Code Setup Installer
            
            **Commit**: ${{ github.sha }}
            **Build Number**: ${{ github.run_number }}
            **Built on**: ${{ github.run_id }}
            **Workflow**: Build, Package and Installer
            **Setup File**: ${{ steps.setup-exe.outputs.filename }}
            **File Size**: ${{ steps.setup-exe.outputs.size }} MB
            
            ### Build Process
            The following commands were executed:
            1. `npm run gulp compile-build-without-mangling`
            2. `npm run gulp bundle-vscode`
            3. `npm run gulp -- vscode-win32-x64-user-setup`
            
            ### Changes
            ${{ github.event.head_commit.message }}
            
            ### Installation
            Download the setup file and run it to install VS Code.
            
            > This is an automated build from the main branch.
          files: |
            ${{ steps.setup-exe.outputs.filename }}
          draft: false
          prerelease: false
      
      - name: Build Summary
        if: always()
        run: |
          echo "## VS Code Setup Build Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Build Commands Executed:" >> $env:GITHUB_STEP_SUMMARY
          echo "- âœ… npm install" >> $env:GITHUB_STEP_SUMMARY
          echo "- âœ… npm run gulp compile-build-without-mangling" >> $env:GITHUB_STEP_SUMMARY
          echo "- âœ… npm run gulp bundle-vscode" >> $env:GITHUB_STEP_SUMMARY
          echo "- âœ… npm run gulp -- vscode-win32-x64-user-setup" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Setup File Generated:" >> $env:GITHUB_STEP_SUMMARY
          if (Test-Path "${{ steps.setup-exe.outputs.filename }}") {
            echo "- ðŸ“¦ **Setup File**: ${{ steps.setup-exe.outputs.filename }}" >> $env:GITHUB_STEP_SUMMARY
            echo "- ðŸ“Š **Size**: ${{ steps.setup-exe.outputs.size }} MB" >> $env:GITHUB_STEP_SUMMARY
          }
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "### Commit Information:" >> $env:GITHUB_STEP_SUMMARY
          echo "- **SHA**: ${{ github.sha }}" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Run ID**: ${{ github.run_id }}" >> $env:GITHUB_STEP_SUMMARY
          echo "- **Build Number**: ${{ github.run_number }}" >> $env:GITHUB_STEP_SUMMARY
